{
  "version": 3,
  "sources": ["../src/libCrypto.ts", "../src/calculette.ts"],
<<<<<<< HEAD
  "sourcesContent": ["/* Source: https://gist.github.com/groundrace/b5141062b47dd96a5c21c93839d4b954 */\n\n/* Available functions:\n\n    # Key/nonce generation:\n    generateAssymetricKeysForEncryption(): Promise<CryptoKey[]>\n    generateAssymetricKeysForSignature(): Promise<CryptoKey[]>\n    generateSymetricKey(): Promise<CryptoKey>\n    generateNonce(): string\n\n    # Assymetric key Encryption/Decryption/Signature/Signature verification\n    encryptWithPublicKey(pkey: CryptoKey, message: string): Promise<string>\n    decryptWithPrivateKey(skey: CryptoKey, message: string): Promise<string>\n    signWithPrivateKey(privateKey: CryptoKey, message: string): Promise<string>\n    verifySignatureWithPublicKey(publicKey: CryptoKey, messageInClear: string, signedMessage: string): Promise<boolean>\n\n    # Symmetric key Encryption/Decryption\n    encryptWithSymmetricKey(key: CryptoKey, message: string): Promise<string[]>\n    decryptWithSymmetricKey(key: CryptoKey, message: string, initVector: string): Promise<string>\n\n    # Importing keys from string\n    stringToPublicKeyForEncryption(pkeyInBase64: string): Promise<CryptoKey>\n    stringToPrivateKeyForEncryption(skeyInBase64: string): Promise<CryptoKey>\n    stringToPublicKeyForSignature(pkeyInBase64: string): Promise<CryptoKey>\n    stringToPrivateKeyForSignature(skeyInBase64: string): Promise<CryptoKey>\n    stringToSymmetricKey(skeyBase64: string): Promise<CryptoKey>\n\n    # Exporting keys to string\n    publicKeyToString(key: CryptoKey): Promise<string>\n    privateKeyToString(key: CryptoKey): Promise<string>\n    symmetricKeyToString(key: CryptoKey): Promise<string>\n\n    # Hashing\n    hash(text: string): Promise<string>\n*/\n\n// import { subtle } from 'crypto'\n// LibCrypto---------------------------------------------------------------------------\n\n/*\nImports the given public key (for encryption) from the import space.\nThe SubtleCrypto imposes to use the \"spki\" format for exporting public keys.\n*/\nexport async function stringToPublicKeyForEncryption(pkeyBase64: string): Promise<CryptoKey> {\n    try {\n        const keyArrayBuffer: ArrayBuffer = base64StringToArrayBuffer(pkeyBase64)\n        const key: CryptoKey = await window.crypto.subtle.importKey(\n            \"spki\",\n            keyArrayBuffer,\n            {\n                name: \"RSA-OAEP\",\n                hash: \"SHA-256\",\n            },\n            true,\n            [\"encrypt\"]\n        )\n        return key\n    } catch (e) {\n        if (e instanceof DOMException) { console.log(\"String for the public key (for encryption) is ill-formed!\") }\n        else if (e instanceof KeyStringCorrupted) { console.log(\"String for the public key (for encryption) is ill-formed!\") }\n        else { console.log(e) }\n        throw e\n    }\n}\n\n/*\nImports the given public key (for signature verification) from the import space.\nThe SubtleCrypto imposes to use the \"spki\" format for exporting public keys.\n*/\nexport async function stringToPublicKeyForSignature(pkeyBase64: string): Promise<CryptoKey> {\n    try {\n        const keyArrayBuffer: ArrayBuffer = base64StringToArrayBuffer(pkeyBase64)\n        const key: CryptoKey = await window.crypto.subtle.importKey(\n            \"spki\",\n            keyArrayBuffer,\n            {\n                name: \"RSASSA-PKCS1-v1_5\",\n                hash: \"SHA-256\",\n            },\n            true,\n            [\"verify\"]\n        )\n        return key\n    } catch (e) {\n        if (e instanceof DOMException) { console.log(\"String for the public key (for signature verification) is ill-formed!\") }\n        else if (e instanceof KeyStringCorrupted) { console.log(\"String for the public key (for signature verification) is ill-formed!\") }\n        else { console.log(e) }\n        throw e\n    }\n}\n\n/*\nImports the given private key (in string) as a valid private key (for decryption)\nThe SubtleCrypto imposes to use the \"pkcs8\" ?? format for importing public keys.\n*/\nexport async function stringToPrivateKeyForEncryption(skeyBase64: string): Promise<CryptoKey> {\n    try {\n        const keyArrayBuffer: ArrayBuffer = base64StringToArrayBuffer(skeyBase64)\n        const key: CryptoKey = await window.crypto.subtle.importKey(\n            \"pkcs8\",\n            keyArrayBuffer,\n            {\n                name: \"RSA-OAEP\",\n                hash: \"SHA-256\",\n            },\n            true,\n            [\"decrypt\"])\n        return key\n    } catch (e) {\n        if (e instanceof DOMException) { console.log(\"String for the private key (for decryption) is ill-formed!\") }\n        else if (e instanceof KeyStringCorrupted) { console.log(\"String for the private key (for decryption) is ill-formed!\") }\n        else { console.log(e) }\n        throw e\n    }\n}\n\n/*\nImports the given private key (in string) as a valid private key (for signature)\nThe SubtleCrypto imposes to use the \"pkcs8\" ?? format for importing public keys.\n*/\nexport async function stringToPrivateKeyForSignature(skeyBase64: string): Promise<CryptoKey> {\n    try {\n        const keyArrayBuffer: ArrayBuffer = base64StringToArrayBuffer(skeyBase64)\n        const key: CryptoKey = await window.crypto.subtle.importKey(\n            \"pkcs8\",\n            keyArrayBuffer,\n            {\n                name: \"RSASSA-PKCS1-v1_5\",\n                hash: \"SHA-256\",\n            },\n            true,\n            [\"sign\"])\n        return key\n    } catch (e) {\n        if (e instanceof DOMException) { console.log(\"String for the private key (for signature) is ill-formed!\") }\n        else if (e instanceof KeyStringCorrupted) { console.log(\"String for the private key (for signature) is ill-formed!\") }\n        else { console.log(e) }\n        throw e\n    }\n}\n/*\nExports the given public key into a valid string.\nThe SubtleCrypto imposes to use the \"spki\" format for exporting public keys.\n*/\n\nexport async function publicKeyToString(key: CryptoKey): Promise<string> {\n    const exportedKey: ArrayBuffer = await window.crypto.subtle.exportKey(\"spki\", key)\n    return arrayBufferToBase64String(exportedKey)\n}\n\n/*\nExports the given public key into a valid string.\nThe SubtleCrypto imposes to use the \"spki\" format for exporting public keys.\n*/\nexport async function privateKeyToString(key: CryptoKey): Promise<string> {\n    const exportedKey: ArrayBuffer = await window.crypto.subtle.exportKey(\"pkcs8\", key)\n    return arrayBufferToBase64String(exportedKey)\n}\n\n/* Generates a pair of public and private RSA keys for encryption/decryption */\nexport async function generateAssymetricKeysForEncryption(): Promise<CryptoKey[]> {\n    const keypair: CryptoKeyPair = await window.crypto.subtle.generateKey(\n        {\n            name: \"RSA-OAEP\",\n            modulusLength: 2048,\n            publicExponent: new Uint8Array([1, 0, 1]),\n            hash: \"SHA-256\",\n        },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    )\n    return [keypair.publicKey, keypair.privateKey]\n}\n\n/* Generates a pair of public and private RSA keys for signing/verifying */\nexport async function generateAssymetricKeysForSignature(): Promise<CryptoKey[]> {\n    const keypair: CryptoKeyPair = await window.crypto.subtle.generateKey(\n        {\n            name: \"RSASSA-PKCS1-v1_5\",\n            modulusLength: 2048,\n            publicExponent: new Uint8Array([1, 0, 1]),\n            hash: \"SHA-256\",\n        },\n        true,\n        [\"sign\", \"verify\"]\n    )\n    return [keypair.publicKey, keypair.privateKey]\n}\n\n/* Generates a random nonce */\nexport function generateNonce(): string {\n    const nonceArray = new Uint32Array(1)\n    self.crypto.getRandomValues(nonceArray)\n    return nonceArray[0].toString()\n}\n\n/* Encrypts a message with a public key */\nexport async function encryptWithPublicKey(publicKey: CryptoKey, message: string): Promise<string> {\n    console.log(\"Encrypt with \" + publicKey + \" message= \" + message)\n    try {\n        const messageToArrayBuffer = textToArrayBuffer(message)\n        const cypheredMessageAB: ArrayBuffer = await window.crypto.subtle.encrypt(\n            { name: \"RSA-OAEP\" },\n            publicKey,\n            messageToArrayBuffer\n        )\n        return arrayBufferToBase64String(cypheredMessageAB)\n    } catch (e) {\n        if (e instanceof DOMException) { console.log(e); console.log(\"Encryption failed!\") }\n        else if (e instanceof KeyStringCorrupted) { console.log(\"Public key or message to encrypt is ill-formed\") }\n        else { console.log(e) }\n        throw e\n    }\n}\n\n/* Sign a message with a private key */\nexport async function signWithPrivateKey(privateKey: CryptoKey, message: string): Promise<string> {\n    console.log(\"Sign with \" + privateKey + \" message= \" + message)\n    try {\n        const messageToArrayBuffer = textToArrayBuffer(message)\n        const signedMessageAB: ArrayBuffer = await window.crypto.subtle.sign(\n            \"RSASSA-PKCS1-v1_5\",\n            privateKey,\n            messageToArrayBuffer\n        )\n        return arrayBufferToBase64String(signedMessageAB)\n    } catch (e) {\n        if (e instanceof DOMException) { console.log(e); console.log(\"Signature failed!\") }\n        else if (e instanceof KeyStringCorrupted) { console.log(\"Private key or message to sign is ill-formed\") }\n        else { console.log(e) }\n        throw e\n    }\n}\n\n\n/* Decrypts a message with a private key */\nexport async function decryptWithPrivateKey(privateKey: CryptoKey, message: string): Promise<string> {\n    try {\n        const decrytpedMessageAB: ArrayBuffer = await\n            window.crypto.subtle.decrypt(\n                { name: \"RSA-OAEP\" },\n                privateKey,\n                base64StringToArrayBuffer(message)\n            )\n        return arrayBufferToText(decrytpedMessageAB)\n    } catch (e) {\n        if (e instanceof DOMException) {\n            console.log(\"Invalid key, message or algorithm for decryption\")\n        } else if (e instanceof KeyStringCorrupted) {\n            console.log(\"Private key or message to decrypt is ill-formed\")\n        }\n        else console.log(\"Decryption failed\")\n        throw e\n    }\n}\n\n\n/* Verification of a signature on a message with a public key */\nexport async function verifySignatureWithPublicKey(publicKey: CryptoKey, messageInClear: string, signedMessage: string): Promise<boolean> {\n    try {\n        const signedToArrayBuffer = base64StringToArrayBuffer(signedMessage)\n        const messageInClearToArrayBuffer = textToArrayBuffer(messageInClear)\n        const verified: boolean = await\n            window.crypto.subtle.verify(\n                \"RSASSA-PKCS1-v1_5\",\n                publicKey,\n                signedToArrayBuffer,\n                messageInClearToArrayBuffer)\n        return verified\n    } catch (e) {\n        if (e instanceof DOMException) {\n            console.log(\"Invalid key, message or algorithm for signature verification\")\n        } else if (e instanceof KeyStringCorrupted) {\n            console.log(\"Public key or signed message to verify is ill-formed\")\n        }\n        else console.log(\"Decryption failed\")\n        throw e\n    }\n}\n\n\n/* Generates a symmetric AES-GCM key */\nexport async function generateSymetricKey(): Promise<CryptoKey> {\n    const key: CryptoKey = await window.crypto.subtle.generateKey(\n        {\n            name: \"AES-GCM\",\n            length: 256,\n        },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    )\n    return key\n}\n\n/* a symmetric AES key into a string */\nexport async function symmetricKeyToString(key: CryptoKey): Promise<string> {\n    const exportedKey: ArrayBuffer = await window.crypto.subtle.exportKey(\"raw\", key)\n    return arrayBufferToBase64String(exportedKey)\n}\n\n/* Imports the given key (in string) as a valid AES key */\nexport async function stringToSymmetricKey(skeyBase64: string): Promise<CryptoKey> {\n    try {\n        const keyArrayBuffer: ArrayBuffer = base64StringToArrayBuffer(skeyBase64)\n        const key: CryptoKey = await window.crypto.subtle.importKey(\n            \"raw\",\n            keyArrayBuffer,\n            \"AES-GCM\",\n            true,\n            [\"encrypt\", \"decrypt\"])\n        return key\n    } catch (e) {\n        if (e instanceof DOMException) { console.log(\"String for the symmetric key is ill-formed!\") }\n        else if (e instanceof KeyStringCorrupted) { console.log(\"String for the symmetric key is ill-formed!\") }\n        else { console.log(e) }\n        throw e\n    }\n}\n\n\n// When cyphering a message with a key in AES, we obtain a cyphered message and an \"initialisation vector\".\n// In this implementation, the output is a two elements array t such that t[0] is the cyphered message\n// and t[1] is the initialisation vector. To simplify, the initialisation vector is represented by a string.\n// The initialisation vectore is used for protecting the encryption, i.e, 2 encryptions of the same message \n// with the same key will never result into the same encrypted message.\n// \n// Note that for decyphering, the **same** initialisation vector will be needed.\n// This vector can safely be transferred in clear with the encrypted message.\n\nexport async function encryptWithSymmetricKey(key: CryptoKey, message: string): Promise<string[]> {\n    console.log(\"Encrypt with \" + key + \" message= \" + message)\n    try {\n        const messageToArrayBuffer = textToArrayBuffer(message)\n        const iv = window.crypto.getRandomValues(new Uint8Array(12));\n        const ivText = arrayBufferToBase64String(iv)\n        const cypheredMessageAB: ArrayBuffer = await window.crypto.subtle.encrypt(\n            { name: \"AES-GCM\", iv },\n            key,\n            messageToArrayBuffer\n        )\n        return [arrayBufferToBase64String(cypheredMessageAB), ivText]\n    } catch (e) {\n        if (e instanceof DOMException) { console.log(e); console.log(\"Encryption failed!\") }\n        else if (e instanceof KeyStringCorrupted) { console.log(\"Symmetric key or message to encrypt is ill-formed\") }\n        else { console.log(e) }\n        throw e\n    }\n}\n\n// For decyphering, we need the key, the cyphered message and the initialization vector. See above the \n// comments for the encryptWithSymmetricKey function\nexport async function decryptWithSymmetricKey(key: CryptoKey, message: string, initVector: string): Promise<string> {\n    const decodedInitVector: ArrayBuffer = base64StringToArrayBuffer(initVector)\n    try {\n        const decrytpedMessageAB: ArrayBuffer = await\n            window.crypto.subtle.decrypt(\n                { name: \"AES-GCM\", iv: decodedInitVector },\n                key,\n                base64StringToArrayBuffer(message)\n            )\n        return arrayBufferToText(decrytpedMessageAB)\n    } catch (e) {\n        if (e instanceof DOMException) {\n            console.log(\"Invalid key, message or algorithm for decryption\")\n        } else if (e instanceof KeyStringCorrupted) {\n            console.log(\"Symmetric key or message to decrypt is ill-formed\")\n        }\n        else console.log(\"Decryption failed\")\n        throw e\n    }\n}\n\n// SHA-256 Hash from a text\nexport async function hash(text: string): Promise<string> {\n    const text2arrayBuf = textToArrayBuffer(text)\n    const hashedArray = await window.crypto.subtle.digest(\"SHA-256\", text2arrayBuf)\n    return arrayBufferToBase64String(hashedArray)\n}\n\nclass KeyStringCorrupted extends Error { }\n\n// ArrayBuffer to a Base64 string\nfunction arrayBufferToBase64String(arrayBuffer: ArrayBuffer): string {\n    var byteArray = new Uint8Array(arrayBuffer)\n    var byteString = ''\n    for (var i = 0; i < byteArray.byteLength; i++) {\n        byteString += String.fromCharCode(byteArray[i])\n    }\n    return btoa(byteString)\n}\n\n// Base64 string to an arrayBuffer\nfunction base64StringToArrayBuffer(b64str: string): ArrayBuffer {\n    try {\n        var byteStr = atob(b64str)\n        var bytes = new Uint8Array(byteStr.length)\n        for (var i = 0; i < byteStr.length; i++) {\n            bytes[i] = byteStr.charCodeAt(i)\n        }\n        return bytes.buffer\n    } catch (e) {\n        console.log(`String starting by '${b64str.substring(0, 10)}' cannot be converted to a valid key or message`)\n        throw new KeyStringCorrupted\n    }\n}\n\n// String to array buffer\nfunction textToArrayBuffer(str: string): ArrayBuffer {\n    var buf = encodeURIComponent(str) // 2 bytes for each char\n    var bufView = new Uint8Array(buf.length)\n    for (var i = 0; i < buf.length; i++) {\n        bufView[i] = buf.charCodeAt(i)\n    }\n    return bufView\n}\n\n// Array buffers to string\nfunction arrayBufferToText(arrayBuffer: ArrayBuffer): string {\n    var byteArray = new Uint8Array(arrayBuffer)\n    var str = ''\n    for (var i = 0; i < byteArray.byteLength; i++) {\n        str += String.fromCharCode(byteArray[i])\n    }\n    return decodeURIComponent(str)\n}\n\n", "\n/* Source: https://gist.github.com/groundrace/b5141062b47dd96a5c21c93839d4b954 */\n\n/* tsc --inlineSourceMap true -outFile JS/calculette.js src/libCrypto.ts src/calculette.ts --target es2015  */\n\nimport {\n    encryptWithPublicKey, decryptWithPrivateKey,\n    generateSymetricKey, generateNonce, encryptWithSymmetricKey, decryptWithSymmetricKey,\n    generateAssymetricKeysForEncryption, stringToPrivateKeyForEncryption, stringToPublicKeyForEncryption, hash,\n    stringToSymmetricKey, publicKeyToString, privateKeyToString, symmetricKeyToString, stringToPrivateKeyForSignature,\n    stringToPublicKeyForSignature, signWithPrivateKey, verifySignatureWithPublicKey\n} from './libCrypto'\n\n\n/* Application --------------------------------------------------------- */\n\n/* getting the main objects from the dom */\n/* Buttons */\nconst rsaEncryptButton = document.getElementById(\"rsa-encrypt-button\") as HTMLButtonElement\nconst rsaDecryptButton = document.getElementById(\"rsa-decrypt-button\") as HTMLButtonElement\nconst rsaSignButton = document.getElementById(\"rsa-sign-button\") as HTMLButtonElement\nconst rsaVerifyButton = document.getElementById(\"rsa-verify-button\") as HTMLButtonElement\nconst generateAsymEncKeysButton = document.getElementById(\"generate-asym-enc-keys-button\") as HTMLButtonElement\n//const generateAsymSignKeysButton = document.getElementById(\"generate-asym-sign-keys-button\") as HTMLButtonElement\n\nconst generateNonceButton = document.getElementById(\"generate-nonce-button\") as HTMLButtonElement\nconst hashButton = document.getElementById(\"hash-button\") as HTMLButtonElement\n\nconst generateSymKeyButton = document.getElementById(\"generate-symkey-button\") as HTMLButtonElement\nconst aesEncryptButton = document.getElementById(\"aes-encrypt-button\") as HTMLButtonElement\nconst aesDecryptButton = document.getElementById(\"aes-decrypt-button\") as HTMLButtonElement\n\n\n/* labels and input fields */\nconst publicKeyEncElement = document.getElementById(\"gen-public-key-enc\") as HTMLTextAreaElement\nconst privateKeyEncElement = document.getElementById(\"gen-private-key-enc\") as HTMLTextAreaElement\nconst publicKeySignElement = document.getElementById(\"gen-public-key-sign\") as HTMLTextAreaElement\nconst privateKeySignElement = document.getElementById(\"gen-private-key-sign\") as HTMLTextAreaElement\n\nconst symmetricKeyElement = document.getElementById(\"gen-symmetric-key\") as HTMLTextAreaElement\nconst aesKeyEncrypt = document.getElementById(\"aes-encrypt-key\") as HTMLTextAreaElement\nconst aesKeyDecrypt = document.getElementById(\"aes-decrypt-key\") as HTMLTextAreaElement\n\nconst rsaMessageBox = document.getElementById(\"rsa-oaep-message\") as HTMLTextAreaElement\nconst aesEncryptMessageBox = document.getElementById(\"aes-encrypt-message\") as HTMLTextAreaElement\nconst aesDecryptMessageBox = document.getElementById(\"aes-decrypt-message\") as HTMLTextAreaElement\n\nconst publicKeyEncBox = document.getElementById(\"rsa-pubkey-enc\") as HTMLTextAreaElement\nconst privateKeyEncBox = document.getElementById(\"rsa-privkey-enc\") as HTMLTextAreaElement\nconst publicKeySignBox = document.getElementById(\"rsa-pubkey-sign\") as HTMLTextAreaElement\nconst privateKeySignBox = document.getElementById(\"rsa-privkey-sign\") as HTMLTextAreaElement\nconst aesEncryptKey = document.getElementById(\"aes-encrypt-key\") as HTMLTextAreaElement\nconst aesDecryptKey = document.getElementById(\"aes-decrypt-key\") as HTMLTextAreaElement\n\nconst cypherTextElement = document.getElementById(\"cyphertext-value\") as HTMLTextAreaElement\nconst messageToDecryptBox = document.getElementById(\"message-to-decrypt\") as HTMLTextAreaElement\nconst decypheredTextElement = document.getElementById(\"decyphertext-value\") as HTMLTextAreaElement\n\nconst messageToSign = document.getElementById(\"message-to-sign\") as HTMLTextAreaElement\nconst signedMessage = document.getElementById(\"signed-value\") as HTMLTextAreaElement\n\nconst signedMessageToCheck = document.getElementById(\"signed-message-to-check\") as HTMLTextAreaElement\nconst signedMessageInClear = document.getElementById(\"signed-message-in-clear\") as HTMLTextAreaElement\nconst rsaPublicKeyForVerification = document.getElementById(\"rsa-public-sign\") as HTMLTextAreaElement\nconst verificationValue = document.getElementById(\"verification-value\") as HTMLTextAreaElement\n\nconst messageToHash = document.getElementById(\"message-to-hash\") as HTMLTextAreaElement\nconst hashedMessage = document.getElementById(\"hashed-message\") as HTMLTextAreaElement\n\nconst aesCypherTextElement = document.getElementById(\"aes-cyphertext-value\") as HTMLTextAreaElement\nconst aesCypherIV = document.getElementById(\"aes-cyphertext-IV\") as HTMLTextAreaElement\nconst aesMessageToDecryptBox = document.getElementById(\"aes-message-to-decrypt\") as HTMLTextAreaElement\nconst aesIVToDecryptBox = document.getElementById(\"aes-decrypt-IV\") as HTMLTextAreaElement\nconst aesDecypheredTextElement = document.getElementById(\"aes-decyphertext-value\") as HTMLTextAreaElement\n\nconst nonceTextElement = document.getElementById(\"nonce\") as HTMLLabelElement\n\ngenerateAsymEncKeysButton.onclick = async function () {\n    try {\n        const keypair: CryptoKey[] = await generateAssymetricKeysForEncryption()\n        const publicKeyText = await publicKeyToString(keypair[0])\n        const privateKeyText = await privateKeyToString(keypair[1])\n        publicKeyEncElement.value = publicKeyText\n        privateKeyEncElement.value = privateKeyText\n    } catch (e) {\n        if (e instanceof DOMException) { alert(\"Generation failed!\") }\n        else { alert(e) }\n    }\n}\n\n// generateAsymSignKeysButton.onclick = async function () {\n//     try {\n//         const keypair: CryptoKey[] = await generateAssymetricKeysForSignature()\n//         const publicKeyText = await publicKeyToString(keypair[0])\n//         const privateKeyText = await privateKeyToString(keypair[1])\n//         publicKeySignElement.value = publicKeyText\n//         privateKeySignElement.value = privateKeyText\n//     } catch (e) {\n//         if (e instanceof DOMException) { alert(\"Generation failed!\") }\n//         else { alert(e) }\n//     }\n// }\n\ngenerateSymKeyButton.onclick = async function () {\n    try {\n        const key: CryptoKey = await generateSymetricKey()\n        const keyText = await symmetricKeyToString(key)\n        symmetricKeyElement.value = keyText\n    } catch (e) {\n        if (e instanceof DOMException) { alert(\"Generation failed!\") }\n        else { alert(e) }\n    }\n}\n\ngenerateNonceButton.onclick = function () {\n    const nonce = generateNonce()\n    nonceTextElement.textContent = nonce\n}\n\nhashButton.onclick = async function () {\n    const textToHash = messageToHash.value\n    hashedMessage.value = await hash(textToHash)\n}\n\nrsaEncryptButton.onclick = async function () {\n    try {\n        const message = rsaMessageBox.value\n        const publicKeyTextBase64: string = publicKeyEncBox.value\n        const publicKey: CryptoKey = await stringToPublicKeyForEncryption(publicKeyTextBase64)\n        const encryptedMessage: string = await encryptWithPublicKey(publicKey, message)\n        cypherTextElement.value = encryptedMessage\n    } catch (e) {\n        alert(\"Encryption failed!\")\n    }\n}\n\nrsaSignButton.onclick = async function () {\n    try {\n        const message = messageToSign.value\n        const privateKeyTextBase64: string = privateKeySignBox.value\n        const privateKey: CryptoKey = await stringToPrivateKeyForSignature(privateKeyTextBase64)\n        const resultingSignedMessage: string = await signWithPrivateKey(privateKey, message)\n        signedMessage.value = resultingSignedMessage\n    } catch (e) {\n        alert(\"Signature failed!\")\n    }\n}\n\n\nrsaVerifyButton.onclick = async function () {\n    try {\n        const signedMessage = signedMessageToCheck.value\n        const messageInClear = signedMessageInClear.value\n        const publicKeyTextBase64: string = publicKeySignBox.value\n        const publicKey: CryptoKey = await stringToPublicKeyForSignature(publicKeyTextBase64)\n        const verification: boolean = await verifySignatureWithPublicKey(publicKey, messageInClear, signedMessage)\n        verificationValue.value = \"\" + verification\n    } catch (e) {\n        alert(\"Signature failed!\")\n    }\n}\n\naesEncryptButton.onclick = async function () {\n    try {\n        const message = aesEncryptMessageBox.value\n        const keyTextBase64: string = aesEncryptKey.value\n        const key: CryptoKey = await stringToSymmetricKey(keyTextBase64)\n        const result: string[] = await encryptWithSymmetricKey(key, message)\n        aesCypherTextElement.value = result[0]\n        aesCypherIV.value = result[1]\n    } catch (e) {\n        alert(\"Encryption failed!\")\n    }\n}\n\nrsaDecryptButton.onclick = async function () {\n    try {\n        const message = messageToDecryptBox.value\n        const privateKeyTextBase64: string = privateKeyEncBox.value\n        const privateKey: CryptoKey = await stringToPrivateKeyForEncryption(privateKeyTextBase64)\n        const decryptedMessage: string = await decryptWithPrivateKey(privateKey, message)\n        decypheredTextElement.value = decryptedMessage\n    } catch (e) {\n        alert(\"Decryption failed\")\n    }\n}\n\n\naesDecryptButton.onclick = async function () {\n    try {\n        const message = aesDecryptMessageBox.value\n        const keyTextBase64: string = aesDecryptKey.value\n        const key: CryptoKey = await stringToSymmetricKey(keyTextBase64)\n        const initVector: string = aesIVToDecryptBox.value\n        const result: string = await decryptWithSymmetricKey(key, message, initVector)\n        aesDecypheredTextElement.value = result\n    } catch (e) {\n        alert(\"Decryption failed!\")\n    }\n}"],
  "mappings": "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",
=======
  "sourcesContent": ["/* Source: https://gist.github.com/groundrace/b5141062b47dd96a5c21c93839d4b954 */\n\n/* Available functions:\n\n    # Key/nonce generation:\n    generateAssymetricKeysForEncryption(): Promise<CryptoKey[]>\n    generateAssymetricKeysForSignature(): Promise<CryptoKey[]>\n    generateSymetricKey(): Promise<CryptoKey>\n    generateNonce(): string\n\n    # Assymetric key Encryption/Decryption/Signature/Signature verification\n    encryptWithPublicKey(pkey: CryptoKey, message: string): Promise<string>\n    decryptWithPrivateKey(skey: CryptoKey, message: string): Promise<string>\n    signWithPrivateKey(privateKey: CryptoKey, message: string): Promise<string>\n    verifySignatureWithPublicKey(publicKey: CryptoKey, messageInClear: string, signedMessage: string): Promise<boolean>\n\n    # Symmetric key Encryption/Decryption\n    encryptWithSymmetricKey(key: CryptoKey, message: string): Promise<string[]>\n    decryptWithSymmetricKey(key: CryptoKey, message: string, initVector: string): Promise<string>\n\n    # Importing keys from string\n    stringToPublicKeyForEncryption(pkeyInBase64: string): Promise<CryptoKey>\n    stringToPrivateKeyForEncryption(skeyInBase64: string): Promise<CryptoKey>\n    stringToPublicKeyForSignature(pkeyInBase64: string): Promise<CryptoKey>\n    stringToPrivateKeyForSignature(skeyInBase64: string): Promise<CryptoKey>\n    stringToSymmetricKey(skeyBase64: string): Promise<CryptoKey>\n\n    # Exporting keys to string\n    publicKeyToString(key: CryptoKey): Promise<string>\n    privateKeyToString(key: CryptoKey): Promise<string>\n    symmetricKeyToString(key: CryptoKey): Promise<string>\n\n    # Hashing\n    hash(text: string): Promise<string>\n*/\n\n// import { subtle } from 'crypto'\n// LibCrypto---------------------------------------------------------------------------\n\n/*\nImports the given public key (for encryption) from the import space.\nThe SubtleCrypto imposes to use the \"spki\" format for exporting public keys.\n*/\nexport async function stringToPublicKeyForEncryption(pkeyBase64: string): Promise<CryptoKey> {\n    try {\n        const keyArrayBuffer: ArrayBuffer = base64StringToArrayBuffer(pkeyBase64)\n        const key: CryptoKey = await window.crypto.subtle.importKey(\n            \"spki\",\n            keyArrayBuffer,\n            {\n                name: \"RSA-OAEP\",\n                hash: \"SHA-256\",\n            },\n            true,\n            [\"encrypt\"]\n        )\n        return key\n    } catch (e) {\n        if (e instanceof DOMException) { console.log(\"String for the public key (for encryption) is ill-formed!\") }\n        else if (e instanceof KeyStringCorrupted) { console.log(\"String for the public key (for encryption) is ill-formed!\") }\n        else { console.log(e) }\n        throw e\n    }\n}\n\n/*\nImports the given public key (for signature verification) from the import space.\nThe SubtleCrypto imposes to use the \"spki\" format for exporting public keys.\n*/\nexport async function stringToPublicKeyForSignature(pkeyBase64: string): Promise<CryptoKey> {\n    try {\n        const keyArrayBuffer: ArrayBuffer = base64StringToArrayBuffer(pkeyBase64)\n        const key: CryptoKey = await window.crypto.subtle.importKey(\n            \"spki\",\n            keyArrayBuffer,\n            {\n                name: \"RSASSA-PKCS1-v1_5\",\n                hash: \"SHA-256\",\n            },\n            true,\n            [\"verify\"]\n        )\n        return key\n    } catch (e) {\n        if (e instanceof DOMException) { console.log(\"String for the public key (for signature verification) is ill-formed!\") }\n        else if (e instanceof KeyStringCorrupted) { console.log(\"String for the public key (for signature verification) is ill-formed!\") }\n        else { console.log(e) }\n        throw e\n    }\n}\n\n/*\nImports the given private key (in string) as a valid private key (for decryption)\nThe SubtleCrypto imposes to use the \"pkcs8\" ?? format for importing public keys.\n*/\nexport async function stringToPrivateKeyForEncryption(skeyBase64: string): Promise<CryptoKey> {\n    try {\n        const keyArrayBuffer: ArrayBuffer = base64StringToArrayBuffer(skeyBase64)\n        const key: CryptoKey = await window.crypto.subtle.importKey(\n            \"pkcs8\",\n            keyArrayBuffer,\n            {\n                name: \"RSA-OAEP\",\n                hash: \"SHA-256\",\n            },\n            true,\n            [\"decrypt\"])\n        return key\n    } catch (e) {\n        if (e instanceof DOMException) { console.log(\"String for the private key (for decryption) is ill-formed!\") }\n        else if (e instanceof KeyStringCorrupted) { console.log(\"String for the private key (for decryption) is ill-formed!\") }\n        else { console.log(e) }\n        throw e\n    }\n}\n\n/*\nImports the given private key (in string) as a valid private key (for signature)\nThe SubtleCrypto imposes to use the \"pkcs8\" ?? format for importing public keys.\n*/\nexport async function stringToPrivateKeyForSignature(skeyBase64: string): Promise<CryptoKey> {\n    try {\n        const keyArrayBuffer: ArrayBuffer = base64StringToArrayBuffer(skeyBase64)\n        const key: CryptoKey = await window.crypto.subtle.importKey(\n            \"pkcs8\",\n            keyArrayBuffer,\n            {\n                name: \"RSASSA-PKCS1-v1_5\",\n                hash: \"SHA-256\",\n            },\n            true,\n            [\"sign\"])\n        return key\n    } catch (e) {\n        if (e instanceof DOMException) { console.log(\"String for the private key (for signature) is ill-formed!\") }\n        else if (e instanceof KeyStringCorrupted) { console.log(\"String for the private key (for signature) is ill-formed!\") }\n        else { console.log(e) }\n        throw e\n    }\n}\n/*\nExports the given public key into a valid string.\nThe SubtleCrypto imposes to use the \"spki\" format for exporting public keys.\n*/\n\nexport async function publicKeyToString(key: CryptoKey): Promise<string> {\n    const exportedKey: ArrayBuffer = await window.crypto.subtle.exportKey(\"spki\", key)\n    return arrayBufferToBase64String(exportedKey)\n}\n\n/*\nExports the given public key into a valid string.\nThe SubtleCrypto imposes to use the \"spki\" format for exporting public keys.\n*/\nexport async function privateKeyToString(key: CryptoKey): Promise<string> {\n    const exportedKey: ArrayBuffer = await window.crypto.subtle.exportKey(\"pkcs8\", key)\n    return arrayBufferToBase64String(exportedKey)\n}\n\n/* Generates a pair of public and private RSA keys for encryption/decryption */\nexport async function generateAssymetricKeysForEncryption(): Promise<CryptoKey[]> {\n    const keypair: CryptoKeyPair = await window.crypto.subtle.generateKey(\n        {\n            name: \"RSA-OAEP\",\n            modulusLength: 2048,\n            publicExponent: new Uint8Array([1, 0, 1]),\n            hash: \"SHA-256\",\n        },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    )\n    return [keypair.publicKey, keypair.privateKey]\n}\n\n/* Generates a pair of public and private RSA keys for signing/verifying */\nexport async function generateAssymetricKeysForSignature(): Promise<CryptoKey[]> {\n    const keypair: CryptoKeyPair = await window.crypto.subtle.generateKey(\n        {\n            name: \"RSASSA-PKCS1-v1_5\",\n            modulusLength: 2048,\n            publicExponent: new Uint8Array([1, 0, 1]),\n            hash: \"SHA-256\",\n        },\n        true,\n        [\"sign\", \"verify\"]\n    )\n    return [keypair.publicKey, keypair.privateKey]\n}\n\n/* Generates a random nonce */\nexport function generateNonce(): string {\n    const nonceArray = new Uint32Array(1)\n    self.crypto.getRandomValues(nonceArray)\n    return nonceArray[0].toString()\n}\n\n/* Encrypts a message with a public key */\nexport async function encryptWithPublicKey(publicKey: CryptoKey, message: string): Promise<string> {\n    try {\n        const messageToArrayBuffer = textToArrayBuffer(message)\n        const cypheredMessageAB: ArrayBuffer = await window.crypto.subtle.encrypt(\n            { name: \"RSA-OAEP\" },\n            publicKey,\n            messageToArrayBuffer\n        )\n        return arrayBufferToBase64String(cypheredMessageAB)\n    } catch (e) {\n        if (e instanceof DOMException) { console.log(e); console.log(\"Encryption failed!\") }\n        else if (e instanceof KeyStringCorrupted) { console.log(\"Public key or message to encrypt is ill-formed\") }\n        else { console.log(e) }\n        throw e\n    }\n}\n\n\n/* Sign a message with a private key */\nexport async function signWithPrivateKey(privateKey: CryptoKey, message: string): Promise<string> {\n    try {\n        const messageToArrayBuffer = textToArrayBuffer(message)\n        const signedMessageAB: ArrayBuffer = await window.crypto.subtle.sign(\n            \"RSASSA-PKCS1-v1_5\",\n            privateKey,\n            messageToArrayBuffer\n        )\n        return arrayBufferToBase64String(signedMessageAB)\n    } catch (e) {\n        if (e instanceof DOMException) { console.log(e); console.log(\"Signature failed!\") }\n        else if (e instanceof KeyStringCorrupted) { console.log(\"Private key or message to sign is ill-formed\") }\n        else { console.log(e) }\n        throw e\n    }\n}\n\n\n/* Decrypts a message with a private key */\nexport async function decryptWithPrivateKey(privateKey: CryptoKey, message: string): Promise<string> {\n    try {\n        const decrytpedMessageAB: ArrayBuffer = await\n            window.crypto.subtle.decrypt(\n                { name: \"RSA-OAEP\" },\n                privateKey,\n                base64StringToArrayBuffer(message)\n            )\n        return arrayBufferToText(decrytpedMessageAB)\n    } catch (e) {\n        if (e instanceof DOMException) {\n            console.log(\"Invalid key, message or algorithm for decryption\")\n        } else if (e instanceof KeyStringCorrupted) {\n            console.log(\"Private key or message to decrypt is ill-formed\")\n        }\n        else console.log(\"Decryption failed\")\n        throw e\n    }\n}\n\n\n/* Verification of a signature on a message with a public key */\nexport async function verifySignatureWithPublicKey(publicKey: CryptoKey, messageInClear: string, signedMessage: string): Promise<boolean> {\n    try {\n        const signedToArrayBuffer = base64StringToArrayBuffer(signedMessage)\n        const messageInClearToArrayBuffer = textToArrayBuffer(messageInClear)\n        const verified: boolean = await\n            window.crypto.subtle.verify(\n                \"RSASSA-PKCS1-v1_5\",\n                publicKey,\n                signedToArrayBuffer,\n                messageInClearToArrayBuffer)\n        return verified\n    } catch (e) {\n        if (e instanceof DOMException) {\n            console.log(\"Invalid key, message or algorithm for signature verification\")\n        } else if (e instanceof KeyStringCorrupted) {\n            console.log(\"Public key or signed message to verify is ill-formed\")\n        }\n        else console.log(\"Decryption failed\")\n        throw e\n    }\n}\n\n\n/* Generates a symmetric AES-GCM key */\nexport async function generateSymetricKey(): Promise<CryptoKey> {\n    const key: CryptoKey = await window.crypto.subtle.generateKey(\n        {\n            name: \"AES-GCM\",\n            length: 256,\n        },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    )\n    return key\n}\n\n/* a symmetric AES key into a string */\nexport async function symmetricKeyToString(key: CryptoKey): Promise<string> {\n    const exportedKey: ArrayBuffer = await window.crypto.subtle.exportKey(\"raw\", key)\n    return arrayBufferToBase64String(exportedKey)\n}\n\n/* Imports the given key (in string) as a valid AES key */\nexport async function stringToSymmetricKey(skeyBase64: string): Promise<CryptoKey> {\n    try {\n        const keyArrayBuffer: ArrayBuffer = base64StringToArrayBuffer(skeyBase64)\n        const key: CryptoKey = await window.crypto.subtle.importKey(\n            \"raw\",\n            keyArrayBuffer,\n            \"AES-GCM\",\n            true,\n            [\"encrypt\", \"decrypt\"])\n        return key\n    } catch (e) {\n        if (e instanceof DOMException) { console.log(\"String for the symmetric key is ill-formed!\") }\n        else if (e instanceof KeyStringCorrupted) { console.log(\"String for the symmetric key is ill-formed!\") }\n        else { console.log(e) }\n        throw e\n    }\n}\n\n\n// When cyphering a message with a key in AES, we obtain a cyphered message and an \"initialisation vector\".\n// In this implementation, the output is a two elements array t such that t[0] is the cyphered message\n// and t[1] is the initialisation vector. To simplify, the initialisation vector is represented by a string.\n// The initialisation vectore is used for protecting the encryption, i.e, 2 encryptions of the same message \n// with the same key will never result into the same encrypted message.\n// \n// Note that for decyphering, the **same** initialisation vector will be needed.\n// This vector can safely be transferred in clear with the encrypted message.\n\nexport async function encryptWithSymmetricKey(key: CryptoKey, message: string): Promise<string[]> {\n    try {\n        const messageToArrayBuffer = textToArrayBuffer(message)\n        const iv = window.crypto.getRandomValues(new Uint8Array(12));\n        const ivText = arrayBufferToBase64String(iv)\n        const cypheredMessageAB: ArrayBuffer = await window.crypto.subtle.encrypt(\n            { name: \"AES-GCM\", iv },\n            key,\n            messageToArrayBuffer\n        )\n        return [arrayBufferToBase64String(cypheredMessageAB), ivText]\n    } catch (e) {\n        if (e instanceof DOMException) { console.log(e); console.log(\"Encryption failed!\") }\n        else if (e instanceof KeyStringCorrupted) { console.log(\"Symmetric key or message to encrypt is ill-formed\") }\n        else { console.log(e) }\n        throw e\n    }\n}\n\n// For decyphering, we need the key, the cyphered message and the initialization vector. See above the \n// comments for the encryptWithSymmetricKey function\nexport async function decryptWithSymmetricKey(key: CryptoKey, message: string, initVector: string): Promise<string> {\n    const decodedInitVector: ArrayBuffer = base64StringToArrayBuffer(initVector)\n    try {\n        const decrytpedMessageAB: ArrayBuffer = await\n            window.crypto.subtle.decrypt(\n                { name: \"AES-GCM\", iv: decodedInitVector },\n                key,\n                base64StringToArrayBuffer(message)\n            )\n        return arrayBufferToText(decrytpedMessageAB)\n    } catch (e) {\n        if (e instanceof DOMException) {\n            console.log(\"Invalid key, message or algorithm for decryption\")\n        } else if (e instanceof KeyStringCorrupted) {\n            console.log(\"Symmetric key or message to decrypt is ill-formed\")\n        }\n        else console.log(\"Decryption failed\")\n        throw e\n    }\n}\n\n// SHA-256 Hash from a text\nexport async function hash(text: string): Promise<string> {\n    const text2arrayBuf = textToArrayBuffer(text)\n    const hashedArray = await window.crypto.subtle.digest(\"SHA-256\", text2arrayBuf)\n    return arrayBufferToBase64String(hashedArray)\n}\n\nclass KeyStringCorrupted extends Error { }\n\n// ArrayBuffer to a Base64 string\nfunction arrayBufferToBase64String(arrayBuffer: ArrayBuffer): string {\n    var byteArray = new Uint8Array(arrayBuffer)\n    var byteString = ''\n    for (var i = 0; i < byteArray.byteLength; i++) {\n        byteString += String.fromCharCode(byteArray[i])\n    }\n    return btoa(byteString)\n}\n\n// Base64 string to an arrayBuffer\nfunction base64StringToArrayBuffer(b64str: string): ArrayBuffer {\n    try {\n        var byteStr = atob(b64str)\n        var bytes = new Uint8Array(byteStr.length)\n        for (var i = 0; i < byteStr.length; i++) {\n            bytes[i] = byteStr.charCodeAt(i)\n        }\n        return bytes.buffer\n    } catch (e) {\n        console.log(`String starting by '${b64str.substring(0, 10)}' cannot be converted to a valid key or message`)\n        throw new KeyStringCorrupted\n    }\n}\n\n// String to array buffer\nfunction textToArrayBuffer(str: string): ArrayBuffer {\n    var buf = encodeURIComponent(str) // 2 bytes for each char\n    var bufView = new Uint8Array(buf.length)\n    for (var i = 0; i < buf.length; i++) {\n        bufView[i] = buf.charCodeAt(i)\n    }\n    return bufView\n}\n\n// Array buffers to string\nfunction arrayBufferToText(arrayBuffer: ArrayBuffer): string {\n    var byteArray = new Uint8Array(arrayBuffer)\n    var str = ''\n    for (var i = 0; i < byteArray.byteLength; i++) {\n        str += String.fromCharCode(byteArray[i])\n    }\n    return decodeURIComponent(str)\n}\n\n", "\n/* Source: https://gist.github.com/groundrace/b5141062b47dd96a5c21c93839d4b954 */\n\n/* tsc --inlineSourceMap true -outFile JS/calculette.js src/libCrypto.ts src/calculette.ts --target es2015  */\n\nimport {\n    encryptWithPublicKey, decryptWithPrivateKey,\n    generateSymetricKey, generateNonce, encryptWithSymmetricKey, decryptWithSymmetricKey,\n    generateAssymetricKeysForEncryption, stringToPrivateKeyForEncryption, stringToPublicKeyForEncryption, hash,\n    stringToSymmetricKey, publicKeyToString, privateKeyToString, symmetricKeyToString, stringToPrivateKeyForSignature,\n    stringToPublicKeyForSignature, signWithPrivateKey, verifySignatureWithPublicKey\n} from './libCrypto'\n\n\n/* Application --------------------------------------------------------- */\n\n/* getting the main objects from the dom */\n/* Buttons */\nconst rsaEncryptButton = document.getElementById(\"rsa-encrypt-button\") as HTMLButtonElement\nconst rsaDecryptButton = document.getElementById(\"rsa-decrypt-button\") as HTMLButtonElement\nconst rsaSignButton = document.getElementById(\"rsa-sign-button\") as HTMLButtonElement\nconst rsaVerifyButton = document.getElementById(\"rsa-verify-button\") as HTMLButtonElement\nconst generateAsymEncKeysButton = document.getElementById(\"generate-asym-enc-keys-button\") as HTMLButtonElement\n//const generateAsymSignKeysButton = document.getElementById(\"generate-asym-sign-keys-button\") as HTMLButtonElement\n\nconst generateNonceButton = document.getElementById(\"generate-nonce-button\") as HTMLButtonElement\nconst hashButton = document.getElementById(\"hash-button\") as HTMLButtonElement\n\nconst generateSymKeyButton = document.getElementById(\"generate-symkey-button\") as HTMLButtonElement\nconst aesEncryptButton = document.getElementById(\"aes-encrypt-button\") as HTMLButtonElement\nconst aesDecryptButton = document.getElementById(\"aes-decrypt-button\") as HTMLButtonElement\n\n\n/* labels and input fields */\nconst publicKeyEncElement = document.getElementById(\"gen-public-key-enc\") as HTMLTextAreaElement\nconst privateKeyEncElement = document.getElementById(\"gen-private-key-enc\") as HTMLTextAreaElement\nconst publicKeySignElement = document.getElementById(\"gen-public-key-sign\") as HTMLTextAreaElement\nconst privateKeySignElement = document.getElementById(\"gen-private-key-sign\") as HTMLTextAreaElement\n\nconst symmetricKeyElement = document.getElementById(\"gen-symmetric-key\") as HTMLTextAreaElement\nconst aesKeyEncrypt = document.getElementById(\"aes-encrypt-key\") as HTMLTextAreaElement\nconst aesKeyDecrypt = document.getElementById(\"aes-decrypt-key\") as HTMLTextAreaElement\n\nconst rsaMessageBox = document.getElementById(\"rsa-oaep-message\") as HTMLTextAreaElement\nconst aesEncryptMessageBox = document.getElementById(\"aes-encrypt-message\") as HTMLTextAreaElement\nconst aesDecryptMessageBox = document.getElementById(\"aes-decrypt-message\") as HTMLTextAreaElement\n\nconst publicKeyEncBox = document.getElementById(\"rsa-pubkey-enc\") as HTMLTextAreaElement\nconst privateKeyEncBox = document.getElementById(\"rsa-privkey-enc\") as HTMLTextAreaElement\nconst publicKeySignBox = document.getElementById(\"rsa-pubkey-sign\") as HTMLTextAreaElement\nconst privateKeySignBox = document.getElementById(\"rsa-privkey-sign\") as HTMLTextAreaElement\nconst aesEncryptKey = document.getElementById(\"aes-encrypt-key\") as HTMLTextAreaElement\nconst aesDecryptKey = document.getElementById(\"aes-decrypt-key\") as HTMLTextAreaElement\n\nconst cypherTextElement = document.getElementById(\"cyphertext-value\") as HTMLTextAreaElement\nconst messageToDecryptBox = document.getElementById(\"message-to-decrypt\") as HTMLTextAreaElement\nconst decypheredTextElement = document.getElementById(\"decyphertext-value\") as HTMLTextAreaElement\n\nconst messageToSign = document.getElementById(\"message-to-sign\") as HTMLTextAreaElement\nconst signedMessage = document.getElementById(\"signed-value\") as HTMLTextAreaElement\n\nconst signedMessageToCheck = document.getElementById(\"signed-message-to-check\") as HTMLTextAreaElement\nconst signedMessageInClear = document.getElementById(\"signed-message-in-clear\") as HTMLTextAreaElement\nconst rsaPublicKeyForVerification = document.getElementById(\"rsa-public-sign\") as HTMLTextAreaElement\nconst verificationValue = document.getElementById(\"verification-value\") as HTMLTextAreaElement\n\nconst messageToHash = document.getElementById(\"message-to-hash\") as HTMLTextAreaElement\nconst hashedMessage = document.getElementById(\"hashed-message\") as HTMLTextAreaElement\n\nconst aesCypherTextElement = document.getElementById(\"aes-cyphertext-value\") as HTMLTextAreaElement\nconst aesCypherIV = document.getElementById(\"aes-cyphertext-IV\") as HTMLTextAreaElement\nconst aesMessageToDecryptBox = document.getElementById(\"aes-message-to-decrypt\") as HTMLTextAreaElement\nconst aesIVToDecryptBox = document.getElementById(\"aes-decrypt-IV\") as HTMLTextAreaElement\nconst aesDecypheredTextElement = document.getElementById(\"aes-decyphertext-value\") as HTMLTextAreaElement\n\nconst nonceTextElement = document.getElementById(\"nonce\") as HTMLLabelElement\n\ngenerateAsymEncKeysButton.onclick = async function () {\n    try {\n        const keypair: CryptoKey[] = await generateAssymetricKeysForEncryption()\n        const publicKeyText = await publicKeyToString(keypair[0])\n        const privateKeyText = await privateKeyToString(keypair[1])\n        publicKeyEncElement.value = publicKeyText\n        privateKeyEncElement.value = privateKeyText\n    } catch (e) {\n        if (e instanceof DOMException) { alert(\"Generation failed!\") }\n        else { alert(e) }\n    }\n}\n\n// generateAsymSignKeysButton.onclick = async function () {\n//     try {\n//         const keypair: CryptoKey[] = await generateAssymetricKeysForSignature()\n//         const publicKeyText = await publicKeyToString(keypair[0])\n//         const privateKeyText = await privateKeyToString(keypair[1])\n//         publicKeySignElement.value = publicKeyText\n//         privateKeySignElement.value = privateKeyText\n//     } catch (e) {\n//         if (e instanceof DOMException) { alert(\"Generation failed!\") }\n//         else { alert(e) }\n//     }\n// }\n\ngenerateSymKeyButton.onclick = async function () {\n    try {\n        const key: CryptoKey = await generateSymetricKey()\n        const keyText = await symmetricKeyToString(key)\n        symmetricKeyElement.value = keyText\n    } catch (e) {\n        if (e instanceof DOMException) { alert(\"Generation failed!\") }\n        else { alert(e) }\n    }\n}\n\ngenerateNonceButton.onclick = function () {\n    const nonce = generateNonce()\n    nonceTextElement.textContent = nonce\n}\n\nhashButton.onclick = async function () {\n    const textToHash = messageToHash.value\n    hashedMessage.value = await hash(textToHash)\n}\n\nrsaEncryptButton.onclick = async function () {\n    try {\n        const message = rsaMessageBox.value\n        const publicKeyTextBase64: string = publicKeyEncBox.value\n        const publicKey: CryptoKey = await stringToPublicKeyForEncryption(publicKeyTextBase64)\n        const encryptedMessage: string = await encryptWithPublicKey(publicKey, message)\n        cypherTextElement.value = encryptedMessage\n    } catch (e) {\n        alert(\"Encryption failed!\")\n    }\n}\n\nrsaSignButton.onclick = async function () {\n    try {\n        const message = messageToSign.value\n        const privateKeyTextBase64: string = privateKeySignBox.value\n        const privateKey: CryptoKey = await stringToPrivateKeyForSignature(privateKeyTextBase64)\n        const resultingSignedMessage: string = await signWithPrivateKey(privateKey, message)\n        signedMessage.value = resultingSignedMessage\n    } catch (e) {\n        alert(\"Signature failed!\")\n    }\n}\n\n\nrsaVerifyButton.onclick = async function () {\n    try {\n        const signedMessage = signedMessageToCheck.value\n        const messageInClear = signedMessageInClear.value\n        const publicKeyTextBase64: string = publicKeySignBox.value\n        const publicKey: CryptoKey = await stringToPublicKeyForSignature(publicKeyTextBase64)\n        const verification: boolean = await verifySignatureWithPublicKey(publicKey, messageInClear, signedMessage)\n        verificationValue.value = \"\" + verification\n    } catch (e) {\n        alert(\"Signature failed!\")\n    }\n}\n\naesEncryptButton.onclick = async function () {\n    try {\n        const message = aesEncryptMessageBox.value\n        const keyTextBase64: string = aesEncryptKey.value\n        const key: CryptoKey = await stringToSymmetricKey(keyTextBase64)\n        const result: string[] = await encryptWithSymmetricKey(key, message)\n        aesCypherTextElement.value = result[0]\n        aesCypherIV.value = result[1]\n    } catch (e) {\n        alert(\"Encryption failed!\")\n    }\n}\n\nrsaDecryptButton.onclick = async function () {\n    try {\n        const message = messageToDecryptBox.value\n        const privateKeyTextBase64: string = privateKeyEncBox.value\n        const privateKey: CryptoKey = await stringToPrivateKeyForEncryption(privateKeyTextBase64)\n        const decryptedMessage: string = await decryptWithPrivateKey(privateKey, message)\n        decypheredTextElement.value = decryptedMessage\n    } catch (e) {\n        alert(\"Decryption failed\")\n    }\n}\n\n\naesDecryptButton.onclick = async function () {\n    try {\n        const message = aesDecryptMessageBox.value\n        const keyTextBase64: string = aesDecryptKey.value\n        const key: CryptoKey = await stringToSymmetricKey(keyTextBase64)\n        const initVector: string = aesIVToDecryptBox.value\n        const result: string = await decryptWithSymmetricKey(key, message, initVector)\n        aesDecypheredTextElement.value = result\n    } catch (e) {\n        alert(\"Decryption failed!\")\n    }\n}"],
  "mappings": "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",
>>>>>>> fa95181 (ajout des tsconfig etc)
  "names": ["signedMessage", "signedMessage"]
}
