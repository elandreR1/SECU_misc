{
  "version": 3,
  "sources": ["../src/serverMessages.ts", "../src/filter.ts"],
  "sourcesContent": ["// All message types between the application and the server\n// Message for user name\nexport class CasUserName {\n    constructor(public username: string) { }\n}\n\n\n// Message for requiring history\nexport class HistoryRequest {\n    constructor(public agentName: string, public index: number) { }\n}\n\n// Result of history request\nexport class HistoryAnswer {\n    constructor(public success: boolean,\n        public failureMessage: string,\n        public index: number,\n        public allMessages: ExtMessage[]) { }\n}\n\n// Filtering of messages\nexport class FilterRequest {\n    constructor(public from: string, public to: string, public indexmin: string) { }\n}\n\nexport class FilteredMessage {\n    constructor(public message: ExtMessage,\n        public index: number,\n        public deleted: boolean,\n        public deleter: string) { }\n}\n\n// Result of filtering request\nexport class FilteringAnswer {\n    constructor(public success: boolean,\n        public failureMessage: string,\n        public allMessages: FilteredMessage[]) { }\n}\n\n// Sending a message Result format\nexport class SendResult {\n    constructor(public success: boolean, public errorMessage: string) { }\n}\n\n// Sending messages\n// The message format\nexport class ExtMessage {\n    constructor(public sender: string, public receiver: string, public content: string) { }\n}\n\nexport class DeletingRequest {\n    constructor(\n        public indexToDelete: string) { }\n}\n\nexport class DeletingAnswer {\n    constructor(public success: boolean,\n        message: string) { }\n}\n\n// Requesting keys\nexport class KeyRequest {\n    constructor(public ownerOfTheKey: string, public publicKey: boolean, public encryption: boolean) { }\n}\n\nexport class KeyResult {\n    constructor(public success: boolean, public key: string, public errorMessage: string) { }\n}", "/* tsc --inlineSourceMap  true -outFile JS/filter.js src/filter.ts --target es2015 */\n\nimport {\n    FilterRequest, FilteringAnswer\n} from './serverMessages'\n\n\nconst filterButton = document.getElementById(\"filter-button\") as HTMLButtonElement\nconst from = document.getElementById(\"from\") as HTMLInputElement\nconst to = document.getElementById(\"to\") as HTMLInputElement\nconst indexminElt = document.getElementById(\"indexmin\") as HTMLInputElement\nconst filtered_messages = document.getElementById(\"filtered-messages\") as HTMLLabelElement\n\n/* Name of the owner/developper of the application, i.e, the name of the folder \n   where the web page of the application is stored. E.g, for teachers' application\n   this name is \"ens\" */\n\nfunction getOwnerName(): string {\n    const path = window.location.pathname\n    const name = path.split(\"/\", 2)[1]\n    return name\n}\n\nlet ownerName = getOwnerName()\n\nfunction clearingMessages() {\n    filtered_messages.textContent = \"\"\n}\n\nfunction stringToHTML(str: string): HTMLDivElement {\n    var div_elt = document.createElement('div')\n    div_elt.innerHTML = str\n    return div_elt\n}\n\nfunction addingFilteredMessage(message: string) {\n    filtered_messages.append(stringToHTML('<p></p><p></p>' + message))\n}\n\nfilterButton.onclick = async function () {\n    try {\n        const fromText = from.value\n        const toText = to.value\n        const indexmin = indexminElt.value\n        const filterRequest =\n            new FilterRequest(fromText, toText, indexmin)\n        const urlParams = new URLSearchParams(window.location.search);\n\n        const request = await fetch(\"/filtering/\" + ownerName + \"?\" + urlParams, {\n            method: \"POST\",\n            body: JSON.stringify(filterRequest),\n            headers: {\n                \"Content-type\": \"application/json; charset=UTF-8\"\n            }\n        });\n        if (!request.ok) {\n            throw new Error(`Error! status: ${request.status}`);\n        }\n        const result = (await request.json()) as FilteringAnswer\n        if (!result.success) { alert(result.failureMessage) }\n        else {\n            clearingMessages()\n            for (var filt_message of result.allMessages) {\n                if (filt_message.deleted) {\n                    addingFilteredMessage(`Index: ${filt_message.index} Deleted by: ${filt_message.deleter} <strike> From: ${filt_message.message.sender} To: ${filt_message.message.receiver} Content: ${filt_message.message.content} </strike>`)\n                } else {\n                    addingFilteredMessage(`Index: ${filt_message.index} From: ${filt_message.message.sender} To: ${filt_message.message.receiver} Content: ${filt_message.message.content}`)\n                }\n            }\n        }\n    }\n    catch (error) {\n        if (error instanceof Error) {\n            console.log('error message: ', error.message);\n            return error.message;\n        } else {\n            console.log('unexpected error: ', error);\n            return 'An unexpected error occurred';\n        }\n    }\n}\n\n\n"],
  "mappings": ";;AAqBO,MAAM,gBAAN,MAAoB;AAAA,IACvB,YAAmBA,OAAqBC,KAAmB,UAAkB;AAA1D,kBAAAD;AAAqB,gBAAAC;AAAmB;AAAA,IAAoB;AAAA,EACnF;;;AChBA,MAAM,eAAe,SAAS,eAAe,eAAe;AAC5D,MAAM,OAAO,SAAS,eAAe,MAAM;AAC3C,MAAM,KAAK,SAAS,eAAe,IAAI;AACvC,MAAM,cAAc,SAAS,eAAe,UAAU;AACtD,MAAM,oBAAoB,SAAS,eAAe,mBAAmB;AAMrE,WAAS,eAAuB;AAC5B,UAAM,OAAO,OAAO,SAAS;AAC7B,UAAM,OAAO,KAAK,MAAM,KAAK,CAAC,EAAE,CAAC;AACjC,WAAO;AAAA,EACX;AAEA,MAAI,YAAY,aAAa;AAE7B,WAAS,mBAAmB;AACxB,sBAAkB,cAAc;AAAA,EACpC;AAEA,WAAS,aAAa,KAA6B;AAC/C,QAAI,UAAU,SAAS,cAAc,KAAK;AAC1C,YAAQ,YAAY;AACpB,WAAO;AAAA,EACX;AAEA,WAAS,sBAAsB,SAAiB;AAC5C,sBAAkB,OAAO,aAAa,mBAAmB,OAAO,CAAC;AAAA,EACrE;AAEA,eAAa,UAAU,iBAAkB;AACrC,QAAI;AACA,YAAM,WAAW,KAAK;AACtB,YAAM,SAAS,GAAG;AAClB,YAAM,WAAW,YAAY;AAC7B,YAAM,gBACF,IAAI,cAAc,UAAU,QAAQ,QAAQ;AAChD,YAAM,YAAY,IAAI,gBAAgB,OAAO,SAAS,MAAM;AAE5D,YAAM,UAAU,MAAM,MAAM,gBAAgB,YAAY,MAAM,WAAW;AAAA,QACrE,QAAQ;AAAA,QACR,MAAM,KAAK,UAAU,aAAa;AAAA,QAClC,SAAS;AAAA,UACL,gBAAgB;AAAA,QACpB;AAAA,MACJ,CAAC;AACD,UAAI,CAAC,QAAQ,IAAI;AACb,cAAM,IAAI,MAAM,kBAAkB,QAAQ,MAAM,EAAE;AAAA,MACtD;AACA,YAAM,SAAU,MAAM,QAAQ,KAAK;AACnC,UAAI,CAAC,OAAO,SAAS;AAAE,cAAM,OAAO,cAAc;AAAA,MAAE,OAC/C;AACD,yBAAiB;AACjB,iBAAS,gBAAgB,OAAO,aAAa;AACzC,cAAI,aAAa,SAAS;AACtB,kCAAsB,UAAU,aAAa,KAAK,gBAAgB,aAAa,OAAO,mBAAmB,aAAa,QAAQ,MAAM,QAAQ,aAAa,QAAQ,QAAQ,aAAa,aAAa,QAAQ,OAAO,YAAY;AAAA,UAClO,OAAO;AACH,kCAAsB,UAAU,aAAa,KAAK,UAAU,aAAa,QAAQ,MAAM,QAAQ,aAAa,QAAQ,QAAQ,aAAa,aAAa,QAAQ,OAAO,EAAE;AAAA,UAC3K;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,SACO,OAAO;AACV,UAAI,iBAAiB,OAAO;AACxB,gBAAQ,IAAI,mBAAmB,MAAM,OAAO;AAC5C,eAAO,MAAM;AAAA,MACjB,OAAO;AACH,gBAAQ,IAAI,sBAAsB,KAAK;AACvC,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;",
  "names": ["from", "to"]
}
