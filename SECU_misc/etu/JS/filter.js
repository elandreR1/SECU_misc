// src/serverMessages.ts
var CasUserName = class {
  constructor(username) {
    this.username = username;
  }
};
var HistoryRequest = class {
  constructor(agentName, index) {
    this.agentName = agentName;
    this.index = index;
  }
};
var HistoryAnswer = class {
  constructor(success, failureMessage, index, allMessages) {
    this.success = success;
    this.failureMessage = failureMessage;
    this.index = index;
    this.allMessages = allMessages;
  }
};
var FilterRequest = class {
  constructor(from2, to2, indexmin) {
    this.from = from2;
    this.to = to2;
    this.indexmin = indexmin;
  }
};
var FilteredMessage = class {
  constructor(message, index, deleted, deleter) {
    this.message = message;
    this.index = index;
    this.deleted = deleted;
    this.deleter = deleter;
  }
};
var FilteringAnswer = class {
  constructor(success, failureMessage, allMessages) {
    this.success = success;
    this.failureMessage = failureMessage;
    this.allMessages = allMessages;
  }
};
var SendResult = class {
  constructor(success, errorMessage) {
    this.success = success;
    this.errorMessage = errorMessage;
  }
};
var ExtMessage = class {
  constructor(sender, receiver, content) {
    this.sender = sender;
    this.receiver = receiver;
    this.content = content;
  }
};
var DeletingRequest = class {
  constructor(indexToDelete) {
    this.indexToDelete = indexToDelete;
  }
};
var DeletingAnswer = class {
  constructor(success, message) {
    this.success = success;
  }
};
var KeyRequest = class {
  constructor(ownerOfTheKey, publicKey, encryption) {
    this.ownerOfTheKey = ownerOfTheKey;
    this.publicKey = publicKey;
    this.encryption = encryption;
  }
};
var KeyResult = class {
  constructor(success, key, errorMessage) {
    this.success = success;
    this.key = key;
    this.errorMessage = errorMessage;
  }
};

// src/filter.ts
var filterButton = document.getElementById("filter-button");
var from = document.getElementById("from");
var to = document.getElementById("to");
var indexminElt = document.getElementById("indexmin");
var filtered_messages = document.getElementById("filtered-messages");
function getOwnerName() {
  const path = window.location.pathname;
  const name = path.split("/", 2)[1];
  return name;
}
var ownerName = getOwnerName();
function clearingMessages() {
  filtered_messages.textContent = "";
}
function stringToHTML(str) {
  var div_elt = document.createElement("div");
  div_elt.innerHTML = str;
  return div_elt;
}
function addingFilteredMessage(message) {
  filtered_messages.append(stringToHTML("<p></p><p></p>" + message));
}
filterButton.onclick = async function() {
  try {
    const fromText = from.value;
    const toText = to.value;
    const indexmin = indexminElt.value;
    const filterRequest = new FilterRequest(fromText, toText, indexmin);
    const urlParams = new URLSearchParams(window.location.search);
    const request = await fetch("/filtering/" + ownerName + "?" + urlParams, {
      method: "POST",
      body: JSON.stringify(filterRequest),
      headers: {
        "Content-type": "application/json; charset=UTF-8"
      }
    });
    if (!request.ok) {
      throw new Error(`Error! status: ${request.status}`);
    }
    const result = await request.json();
    if (!result.success) {
      alert(result.failureMessage);
    } else {
      clearingMessages();
      for (var filt_message of result.allMessages) {
        if (filt_message.deleted) {
          addingFilteredMessage(`Index: ${filt_message.index} Deleted by: ${filt_message.deleter} <strike> From: ${filt_message.message.sender} To: ${filt_message.message.receiver} Content: ${filt_message.message.content} </strike>`);
        } else {
          addingFilteredMessage(`Index: ${filt_message.index} From: ${filt_message.message.sender} To: ${filt_message.message.receiver} Content: ${filt_message.message.content}`);
        }
      }
    }
  } catch (error) {
    if (error instanceof Error) {
      console.log("error message: ", error.message);
      return error.message;
    } else {
      console.log("unexpected error: ", error);
      return "An unexpected error occurred";
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
